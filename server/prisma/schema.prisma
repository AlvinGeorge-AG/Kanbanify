generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password      String
  refreshTokens RefreshToken[]
  projects      Project[]
  comments      Comment[]
  assignedCards Card[]    @relation("CardToUser")
  invites       Invite[]
  profileUrl    String    @db.VarChar(2048)
  createdAt     DateTime  @default(now())
  
  @@index([email])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model Project {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  description String?   @db.Text
  ownerId   String
  invites   Invite[]
  user      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  cards     Card[]
  types     Type[]
  createdAt DateTime @default(now())

  @@index([ownerId])
}

model Card {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(255)
  description String?   @db.Text
  priority    String?   @db.VarChar(50)
  projectId   String
  typeId      String?
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  type        Type?     @relation(fields: [typeId], references: [id])
  assigned    User[]    @relation("CardToUser")
  comments    Comment[]
  createdAt   DateTime  @default(now())

  @@index([projectId])
  @@index([typeId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cardId])
  @@index([userId])
}

model Invite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([projectId])
}

model Type {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())

  @@index([projectId])
  @@unique([projectId, name])
}